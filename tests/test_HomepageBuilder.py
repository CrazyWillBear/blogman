# The following code was generated by ChatGPT o3-mini-high in order
# to increase my efficiency and progress in regard to blogman's code:
# automating unit tests in this way is very helpful.

import unittest
import tempfile
from pathlib import Path
from unittest.mock import MagicMock
from blogman.HomepageBuilder import HomepageBuilder

class TestHomepageBuilder(unittest.TestCase):
    def setUp(self):
        # Create a temporary directory for all test files.
        self.temp_dir = tempfile.TemporaryDirectory()
        self.temp_path = Path(self.temp_dir.name)

        # Create an HTML directory where blog post files will reside.
        self.html_dir = self.temp_path / "html"
        self.html_dir.mkdir()

        # Create a homepage template file containing placeholders.
        self.home_template_path = self.temp_path / "home_template.html"
        self.home_template_path.write_text(
            "<html><body><!-- header --><!-- blog boxes --></body></html>",
            encoding="utf-8"
        )

        # Create a homepage markdown file.
        self.home_md_path = self.temp_path / "home.md"
        self.home_md_path.write_text("# Welcome to the Blog", encoding="utf-8")

        # For testing, place the final homepage HTML inside the html_dir.
        # The builder will ignore this file when generating blog boxes.
        self.home_html_path = self.html_dir / "index.html"
        self.home_html_path.write_text("", encoding="utf-8")

        # Create dummy blog post HTML files.
        self.blog1 = self.html_dir / "my-blog.html"
        self.blog1.write_text("<html>My Blog Content</html>", encoding="utf-8")

        self.blog2 = self.html_dir / "another-blog.html"
        self.blog2.write_text("<html>Another Blog Content</html>", encoding="utf-8")

        # Create an extra file that should not be included (wrong extension).
        self.non_blog = self.html_dir / "notes.txt"
        self.non_blog.write_text("Some notes", encoding="utf-8")

        # Create a dummy converter which returns a fixed header.
        self.converter = MagicMock()
        self.converter.convert_md.return_value = "<h1>Header</h1>"

        # Instantiate the HomepageBuilder.
        # Note that __init__ calls build() automatically.
        self.builder = HomepageBuilder(
            html_dir=self.html_dir,
            home_template_path=self.home_template_path,
            home_html_path=self.home_html_path,
            home_md_path=self.home_md_path,
            converter=self.converter
        )

    def tearDown(self):
        self.temp_dir.cleanup()

    def test_build_header(self):
        # Ensure that _build_header returns what the converter produces.
        header = self.builder._build_header()
        self.converter.convert_md.assert_called_with(self.home_md_path)
        self.assertEqual(header, "<h1>Header</h1>")

    def test_build_blog_boxes(self):
        # _build_blog_boxes should generate a blog box for each HTML file
        # in html_dir, except for the homepage output.
        blog_boxes = self.builder._build_blog_boxes()
        # Expect blog boxes to include "my-blog" and "another-blog" but not "index.html"
        self.assertIn("my blog", blog_boxes.lower())
        self.assertIn("another blog", blog_boxes.lower())
        self.assertNotIn("index", blog_boxes.lower())
        # Check for expected HTML structure.
        self.assertIn('<div class="blog-box">', blog_boxes)

    def test_build_method(self):
        # Calling build() should replace placeholders in the template and
        # write the final HTML to home_html_path.
        self.builder.build()
        final_content = self.home_html_path.read_text(encoding="utf-8")
        self.assertNotIn("<!-- header -->", final_content)
        self.assertNotIn("<!-- blog boxes -->", final_content)
        self.assertIn("<h1>Header</h1>", final_content)
        self.assertIn('<div class="blog-box">', final_content)

if __name__ == "__main__":
    unittest.main()
