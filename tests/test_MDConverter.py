# The following code was generated by ChatGPT o3-mini-high in order
# to increase my efficiency and progress in regard to blogman's code:
# automating unit tests in this way is very helpful.

import unittest
import tempfile
from pathlib import Path
import markdown
from blogman.MDConverter import MDConverter


class TestMDConverter(unittest.TestCase):
    def setUp(self):
        # Create a temporary directory for our test files.
        self.temp_dir = tempfile.TemporaryDirectory()
        self.temp_path = Path(self.temp_dir.name)

        # Create an HTML output directory.
        self.html_dir = self.temp_path / "html"
        self.html_dir.mkdir()

        # Create a blog template file with placeholders for title and blog content.
        self.blog_template_path = self.temp_path / "blog_template.html"
        self.blog_template_path.write_text(
            "<html><head><title><!-- title --></title></head><body><!-- blog --></body></html>",
            encoding="utf-8"
        )

        # Create a markdown file with known content.
        self.md_file = self.temp_path / "sample.md"
        self.markdown_content = "# Hello World"
        self.md_file.write_text(self.markdown_content, encoding="utf-8")

        # Instantiate the MDConverter.
        self.converter = MDConverter(
            html_dir=self.html_dir,
            blog_template_path=self.blog_template_path
        )

    def tearDown(self):
        self.temp_dir.cleanup()

    def test_convert_md(self):
        # Test that the static convert_md method returns the expected HTML.
        expected_html = markdown.markdown(self.markdown_content)
        result = MDConverter.convert_md(self.md_file)
        self.assertEqual(result, expected_html)

    def test_build_file(self):
        # Test that _build_file returns the full HTML page with the template placeholders replaced.
        expected_blog_html = markdown.markdown(self.markdown_content)
        expected_title = self.md_file.stem  # "sample"
        template_text = self.blog_template_path.read_text(encoding="utf-8")
        expected_output = template_text.replace("<!-- title -->", expected_title) \
            .replace("<!-- blog -->", expected_blog_html)
        result = self.converter._build_file(self.md_file)
        self.assertEqual(result, expected_output)

    def test_convert_file(self):
        # Test that convert_file writes the correct output file in the html_dir.
        self.converter.convert_file(self.md_file)
        expected_file_name = self.md_file.stem.replace(" ", "-") + ".html"
        output_file = self.html_dir / expected_file_name
        self.assertTrue(output_file.exists())
        # Verify that the file content matches what _build_file produces.
        expected_content = self.converter._build_file(self.md_file)
        actual_content = output_file.read_text(encoding="utf-8")
        self.assertEqual(actual_content, expected_content)


if __name__ == "__main__":
    unittest.main()
